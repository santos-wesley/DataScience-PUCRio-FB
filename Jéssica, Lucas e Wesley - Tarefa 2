{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cOx0f2v61f1w"
      },
      "source": [
        "## Preliminaries"
      ],
      "id": "cOx0f2v61f1w"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wta3NnnFz5_k"
      },
      "source": [
        "### 1. Importing Packages"
      ],
      "id": "Wta3NnnFz5_k"
    },
    {
      "cell_type": "code",
      "execution_count": 263,
      "metadata": {
        "id": "4fe3e3ca-2ba2-494c-8be2-de6cc1a8bc74",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "70f09a5a-5a80-4124-eefb-947c6c480034"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: category_encoders in /usr/local/lib/python3.7/dist-packages (2.5.1.post0)\n",
            "Requirement already satisfied: pandas>=1.0.5 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (1.3.5)\n",
            "Requirement already satisfied: statsmodels>=0.9.0 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (0.12.2)\n",
            "Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (0.5.2)\n",
            "Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (1.7.3)\n",
            "Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (1.0.2)\n",
            "Requirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (1.21.6)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.0.5->category_encoders) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.0.5->category_encoders) (2022.4)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from patsy>=0.5.1->category_encoders) (1.15.0)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.20.0->category_encoders) (1.2.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.20.0->category_encoders) (3.1.0)\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "!pip install category_encoders\n",
        "import category_encoders as ce\n",
        "from sklearn import tree\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import ConfusionMatrixDisplay\n",
        "from sklearn.metrics import matthews_corrcoef\n",
        "import graphviz\n",
        "%matplotlib inline"
      ],
      "id": "4fe3e3ca-2ba2-494c-8be2-de6cc1a8bc74"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b9005b83"
      },
      "source": [
        "### 2. Gathering Data"
      ],
      "id": "b9005b83"
    },
    {
      "cell_type": "code",
      "execution_count": 279,
      "metadata": {
        "id": "ae85abd5-5424-4d84-952a-5ff1de514410"
      },
      "outputs": [],
      "source": [
        "data_url = \"https://raw.githubusercontent.com/renatoquiliche/DataScience-PUCRio-FB/main/Data/DS_salarios/ds_salaries.csv\"\n",
        "data = pd.read_csv(data_url, index_col = 0)"
      ],
      "id": "ae85abd5-5424-4d84-952a-5ff1de514410"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "78C4eYGb2qBG"
      },
      "source": [
        "* No need to convert to parquet dataset. The dataset is small."
      ],
      "id": "78C4eYGb2qBG"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rWA2nC-FzrRN"
      },
      "source": [
        "### 3. Assessing Data"
      ],
      "id": "rWA2nC-FzrRN"
    },
    {
      "cell_type": "code",
      "execution_count": 265,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "AaTg24bz0LwA",
        "outputId": "754422c4-21e5-4be4-c97a-fab220c0eede"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   work_year  work_month experience_level employment_type  \\\n",
              "0       2020           6               MI              FT   \n",
              "1       2020          11               SE              FT   \n",
              "2       2020          12               SE              FT   \n",
              "3       2020           6               MI              FT   \n",
              "4       2020          10               SE              FT   \n",
              "\n",
              "                    job_title  salary salary_currency  salary_in_usd  \\\n",
              "0              Data Scientist   70000             EUR          79833   \n",
              "1  Machine Learning Scientist  260000             USD         260000   \n",
              "2           Big Data Engineer   85000             GBP         109024   \n",
              "3        Product Data Analyst   20000             USD          20000   \n",
              "4   Machine Learning Engineer  150000             USD         150000   \n",
              "\n",
              "  employee_residence  remote_ratio company_location company_size  \n",
              "0                 DE             0               DE            L  \n",
              "1                 JP             0               JP            S  \n",
              "2                 GB            50               GB            M  \n",
              "3                 HN             0               HN            S  \n",
              "4                 US            50               US            L  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5e50deab-d95a-4891-8163-ea05709b4c71\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>work_year</th>\n",
              "      <th>work_month</th>\n",
              "      <th>experience_level</th>\n",
              "      <th>employment_type</th>\n",
              "      <th>job_title</th>\n",
              "      <th>salary</th>\n",
              "      <th>salary_currency</th>\n",
              "      <th>salary_in_usd</th>\n",
              "      <th>employee_residence</th>\n",
              "      <th>remote_ratio</th>\n",
              "      <th>company_location</th>\n",
              "      <th>company_size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020</td>\n",
              "      <td>6</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>70000</td>\n",
              "      <td>EUR</td>\n",
              "      <td>79833</td>\n",
              "      <td>DE</td>\n",
              "      <td>0</td>\n",
              "      <td>DE</td>\n",
              "      <td>L</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020</td>\n",
              "      <td>11</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Machine Learning Scientist</td>\n",
              "      <td>260000</td>\n",
              "      <td>USD</td>\n",
              "      <td>260000</td>\n",
              "      <td>JP</td>\n",
              "      <td>0</td>\n",
              "      <td>JP</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020</td>\n",
              "      <td>12</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Big Data Engineer</td>\n",
              "      <td>85000</td>\n",
              "      <td>GBP</td>\n",
              "      <td>109024</td>\n",
              "      <td>GB</td>\n",
              "      <td>50</td>\n",
              "      <td>GB</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020</td>\n",
              "      <td>6</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Product Data Analyst</td>\n",
              "      <td>20000</td>\n",
              "      <td>USD</td>\n",
              "      <td>20000</td>\n",
              "      <td>HN</td>\n",
              "      <td>0</td>\n",
              "      <td>HN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020</td>\n",
              "      <td>10</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Machine Learning Engineer</td>\n",
              "      <td>150000</td>\n",
              "      <td>USD</td>\n",
              "      <td>150000</td>\n",
              "      <td>US</td>\n",
              "      <td>50</td>\n",
              "      <td>US</td>\n",
              "      <td>L</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5e50deab-d95a-4891-8163-ea05709b4c71')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5e50deab-d95a-4891-8163-ea05709b4c71 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5e50deab-d95a-4891-8163-ea05709b4c71');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 265
        }
      ],
      "source": [
        "data.head()"
      ],
      "id": "AaTg24bz0LwA"
    },
    {
      "cell_type": "code",
      "execution_count": 266,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V8Ytl3Ql0SA1",
        "outputId": "047b172e-5799-44be-b47d-cd335922fe13"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The number of rows are 607 and columns are 12\n"
          ]
        }
      ],
      "source": [
        "print(\"The number of rows are {} and columns are {}\".format(data.shape[0], data.shape[1]))"
      ],
      "id": "V8Ytl3Ql0SA1"
    },
    {
      "cell_type": "code",
      "execution_count": 267,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1FJLOanp0p5l",
        "outputId": "138a655f-4e4f-4356-8b69-cbd3f9916f01"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['work_year', 'work_month', 'experience_level', 'employment_type',\n",
              "       'job_title', 'salary', 'salary_currency', 'salary_in_usd',\n",
              "       'employee_residence', 'remote_ratio', 'company_location',\n",
              "       'company_size'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 267
        }
      ],
      "source": [
        "# List columns\n",
        "data.columns"
      ],
      "id": "1FJLOanp0p5l"
    },
    {
      "cell_type": "code",
      "execution_count": 268,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ddzk_SLV0zmz",
        "outputId": "61b92417-5bda-4ec3-de96-847c932a52b0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 607 entries, 0 to 606\n",
            "Data columns (total 12 columns):\n",
            " #   Column              Non-Null Count  Dtype \n",
            "---  ------              --------------  ----- \n",
            " 0   work_year           607 non-null    int64 \n",
            " 1   work_month          607 non-null    int64 \n",
            " 2   experience_level    607 non-null    object\n",
            " 3   employment_type     607 non-null    object\n",
            " 4   job_title           607 non-null    object\n",
            " 5   salary              607 non-null    int64 \n",
            " 6   salary_currency     607 non-null    object\n",
            " 7   salary_in_usd       607 non-null    int64 \n",
            " 8   employee_residence  607 non-null    object\n",
            " 9   remote_ratio        607 non-null    int64 \n",
            " 10  company_location    607 non-null    object\n",
            " 11  company_size        607 non-null    object\n",
            "dtypes: int64(5), object(7)\n",
            "memory usage: 61.6+ KB\n"
          ]
        }
      ],
      "source": [
        "# Look for missing data\n",
        "data.info()"
      ],
      "id": "ddzk_SLV0zmz"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S1c2zQf81DBC"
      },
      "source": [
        "* There are no missing values."
      ],
      "id": "S1c2zQf81DBC"
    },
    {
      "cell_type": "code",
      "execution_count": 269,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "Tgcj9CF47Nmn",
        "outputId": "ff7cd647-d97b-43e3-9d52-1313bbe29534"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f2068c15610>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 269
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "data.hist(column=[\"salary_in_usd\"],figsize = (10,8))"
      ],
      "id": "Tgcj9CF47Nmn"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "de9San3n1rQS"
      },
      "source": [
        "## Pre-processing"
      ],
      "id": "de9San3n1rQS"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3332d93b"
      },
      "source": [
        "### 1. Resampling Data, estimating variable mean and value frequency via Bootsrapping"
      ],
      "id": "3332d93b"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5f621eee"
      },
      "source": [
        "##### 1.1 Bootstrapping function"
      ],
      "id": "5f621eee"
    },
    {
      "cell_type": "code",
      "execution_count": 270,
      "metadata": {
        "id": "c2d760cc-dd57-4b55-977c-93039c219b0d"
      },
      "outputs": [],
      "source": [
        "def mean_bootstrap(series, B = 10000):\n",
        "    return pd.Series([series.sample(n = len(series), replace = True).mean() for i in range(B)])\n",
        "\n",
        "def frequency_bootstrap(series, value, B = 10000):\n",
        "    \n",
        "    T = pd.Series(data = 0, index = range(B))\n",
        "\n",
        "    for i in range(B):\n",
        "        \n",
        "        sample = series.sample(n = len(series), replace = True)\n",
        "        T_i = len(sample[sample == value])/len(series)\n",
        "        T.loc[i] = T_i\n",
        "\n",
        "    return T"
      ],
      "id": "c2d760cc-dd57-4b55-977c-93039c219b0d"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "50d7ab74"
      },
      "source": [
        "##### 1.2 Mean Estimation"
      ],
      "id": "50d7ab74"
    },
    {
      "cell_type": "code",
      "execution_count": 271,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "aa7e75c5",
        "outputId": "0dafd034-805a-41dd-e319-cb4d6d9c7c1c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "frequency = mean_bootstrap(data.salary,100000)\n",
        "\n",
        "fig,ax = plt.subplots(figsize = (10,8))\n",
        "\n",
        "\n",
        "ax.set_title('resample mean histogram')\n",
        "ax.axvline(data.salary.mean(), color = 'red', label = 'data original sample mean - µ = %.2f'%data.salary.mean())\n",
        "ax.axvline(frequency.mean(), label = 'mean of resample means - θ_hat = %.2f'%frequency.mean(), color = 'orange',linestyle = 'dashed')\n",
        "ax.axvline(frequency.quantile(q=0.025),label = 'UB IC 95 percent for θ = %.2f'%frequency.quantile(q=0.025), color = 'red', linestyle = 'dashed')\n",
        "ax.axvline(frequency.quantile(q=0.975), label = 'LB IC 95 percent for θ = %.2f'%frequency.quantile(q=0.975), color = 'red', linestyle = 'dashed')\n",
        "ax.hist(frequency, bins = 75, edgecolor = 'white', alpha = 0.8)\n",
        "ax.legend()\n",
        "\n",
        "plt.show()"
      ],
      "id": "aa7e75c5"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "87051df0-65a9-4f22-ad28-2a13849f6873"
      },
      "source": [
        "##### 1.3 Frequency Estimation"
      ],
      "id": "87051df0-65a9-4f22-ad28-2a13849f6873"
    },
    {
      "cell_type": "code",
      "execution_count": 272,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "96c7c12d",
        "outputId": "c8d072c9-7c97-448f-aef2-e69bba00c6d6"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "value = 'USD'\n",
        "frequency = frequency_bootstrap(data.salary_currency, value, 500000)\n",
        "frq_original_sample = len(data[data.salary_currency == value]) / len(data)\n",
        "\n",
        "fig,ax = plt.subplots(figsize = (10,8))\n",
        "\n",
        "ax.set_title('resample %s frequency histogram'%value)\n",
        "ax.hist(frequency, bins = 50, edgecolor = 'white', alpha = 0.8)\n",
        "ax.axvline(frq_original_sample, color = 'red', label = '%s frequency on original sample = %.4f'%(value, frq_original_sample))\n",
        "ax.axvline(frequency.mean(), label = 'mean of resample frequency - θ_hat = %.4f'%frequency.mean(), color = 'orange',linestyle = 'dashed')\n",
        "ax.axvline(frequency.quantile(q=0.025),label = 'UB IC 95 percent for θ = %.4f'%frequency.quantile(q=0.025), color = 'red', linestyle = 'dashed')\n",
        "ax.axvline(frequency.quantile(q=0.975), label = 'LB IC 95 percent for θ = %.4f'%frequency.quantile(q=0.975), color = 'red', linestyle = 'dashed')\n",
        "ax.legend()\n",
        "\n",
        "plt.show()"
      ],
      "id": "96c7c12d"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b6bb1ede"
      },
      "source": [
        "### 2. Quantile Discretization"
      ],
      "id": "b6bb1ede"
    },
    {
      "cell_type": "code",
      "execution_count": 273,
      "metadata": {
        "id": "63638f77",
        "outputId": "fb07111d-0d76-4f79-e963-e5e1984c9541",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     salary      salary_discretized\n",
              "0     70000      (60000.0, 80000.0]\n",
              "1    260000  (237000.0, 30400000.0]\n",
              "2     85000      (80000.0, 99020.0]\n",
              "3     20000     (3999.999, 42720.0]\n",
              "4    150000    (133928.0, 152600.0]\n",
              "..      ...                     ...\n",
              "602  154000    (152600.0, 180000.0]\n",
              "603  126000    (115000.0, 133928.0]\n",
              "604  129000    (115000.0, 133928.0]\n",
              "605  150000    (133928.0, 152600.0]\n",
              "606  200000    (180000.0, 237000.0]\n",
              "\n",
              "[607 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-75eb3ed1-183c-450d-acce-114eb499e8fc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>salary</th>\n",
              "      <th>salary_discretized</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>70000</td>\n",
              "      <td>(60000.0, 80000.0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>260000</td>\n",
              "      <td>(237000.0, 30400000.0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>85000</td>\n",
              "      <td>(80000.0, 99020.0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>20000</td>\n",
              "      <td>(3999.999, 42720.0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>150000</td>\n",
              "      <td>(133928.0, 152600.0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>602</th>\n",
              "      <td>154000</td>\n",
              "      <td>(152600.0, 180000.0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>603</th>\n",
              "      <td>126000</td>\n",
              "      <td>(115000.0, 133928.0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>604</th>\n",
              "      <td>129000</td>\n",
              "      <td>(115000.0, 133928.0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>605</th>\n",
              "      <td>150000</td>\n",
              "      <td>(133928.0, 152600.0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>606</th>\n",
              "      <td>200000</td>\n",
              "      <td>(180000.0, 237000.0]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>607 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-75eb3ed1-183c-450d-acce-114eb499e8fc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-75eb3ed1-183c-450d-acce-114eb499e8fc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-75eb3ed1-183c-450d-acce-114eb499e8fc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 273
        }
      ],
      "source": [
        "data['salary_discretized'] = pd.qcut(data.salary,10)\n",
        "data[['salary','salary_discretized']]"
      ],
      "id": "63638f77"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3204e6f6"
      },
      "source": [
        "### 3. Feature Engineering"
      ],
      "id": "3204e6f6"
    },
    {
      "cell_type": "code",
      "execution_count": 274,
      "metadata": {
        "id": "3fb2d261",
        "outputId": "25591bfb-77ec-4b22-db38-82ed436f8f31",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     work_year  work_month  remote_ratio working_days_count  \\\n",
              "0         2020           6             0           943 days   \n",
              "1         2020          11             0           790 days   \n",
              "2         2020          12            50           760 days   \n",
              "3         2020           6             0           943 days   \n",
              "4         2020          10            50           821 days   \n",
              "..         ...         ...           ...                ...   \n",
              "602       2022           5           100           244 days   \n",
              "603       2022           6           100           213 days   \n",
              "604       2022          11             0            60 days   \n",
              "605       2022           2           100           333 days   \n",
              "606       2022           3           100           305 days   \n",
              "\n",
              "    remote_work_days_count  \n",
              "0          0 days 00:00:00  \n",
              "1          0 days 00:00:00  \n",
              "2         84 days 10:40:00  \n",
              "3          0 days 00:00:00  \n",
              "4         91 days 05:20:00  \n",
              "..                     ...  \n",
              "602       54 days 05:20:00  \n",
              "603       47 days 08:00:00  \n",
              "604        0 days 00:00:00  \n",
              "605       74 days 00:00:00  \n",
              "606       67 days 18:40:00  \n",
              "\n",
              "[607 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-166233d4-7f0e-47ed-a734-f7a3a0b8a4ee\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>work_year</th>\n",
              "      <th>work_month</th>\n",
              "      <th>remote_ratio</th>\n",
              "      <th>working_days_count</th>\n",
              "      <th>remote_work_days_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>943 days</td>\n",
              "      <td>0 days 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>790 days</td>\n",
              "      <td>0 days 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020</td>\n",
              "      <td>12</td>\n",
              "      <td>50</td>\n",
              "      <td>760 days</td>\n",
              "      <td>84 days 10:40:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>943 days</td>\n",
              "      <td>0 days 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020</td>\n",
              "      <td>10</td>\n",
              "      <td>50</td>\n",
              "      <td>821 days</td>\n",
              "      <td>91 days 05:20:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>602</th>\n",
              "      <td>2022</td>\n",
              "      <td>5</td>\n",
              "      <td>100</td>\n",
              "      <td>244 days</td>\n",
              "      <td>54 days 05:20:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>603</th>\n",
              "      <td>2022</td>\n",
              "      <td>6</td>\n",
              "      <td>100</td>\n",
              "      <td>213 days</td>\n",
              "      <td>47 days 08:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>604</th>\n",
              "      <td>2022</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>60 days</td>\n",
              "      <td>0 days 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>605</th>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "      <td>100</td>\n",
              "      <td>333 days</td>\n",
              "      <td>74 days 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>606</th>\n",
              "      <td>2022</td>\n",
              "      <td>3</td>\n",
              "      <td>100</td>\n",
              "      <td>305 days</td>\n",
              "      <td>67 days 18:40:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>607 rows × 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-166233d4-7f0e-47ed-a734-f7a3a0b8a4ee')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-166233d4-7f0e-47ed-a734-f7a3a0b8a4ee button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-166233d4-7f0e-47ed-a734-f7a3a0b8a4ee');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 274
        }
      ],
      "source": [
        "data['working_days_count'] = pd.to_datetime(\"2022-12-31\") - pd.to_datetime(data.work_year.map(str) + '-' + data.work_month.map(str)) #suppose today is 2022/12/31\n",
        "data['remote_work_days_count'] = data.remote_ratio/100 * data['working_days_count'] * 8/24 * 20/30 #suppose 8 hours of work a day, 20 days of work each month\n",
        "data[['work_year', 'work_month', 'remote_ratio', 'working_days_count', 'remote_work_days_count']]"
      ],
      "id": "3fb2d261"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vHZPhgEf3utI"
      },
      "source": [
        "### 4. Get Dummies"
      ],
      "id": "vHZPhgEf3utI"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jJc1L_Op4a2v"
      },
      "source": [
        "#### 4.1. Transform the categorical features into binary variables (dummy variables)"
      ],
      "id": "jJc1L_Op4a2v"
    },
    {
      "cell_type": "code",
      "execution_count": 275,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "5RDVJn556OjZ",
        "outputId": "db65072f-192a-4339-fc23-a204ee1cb041"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   work_year  work_month experience_level employment_type  \\\n",
              "0       2020           6               MI              FT   \n",
              "1       2020          11               SE              FT   \n",
              "2       2020          12               SE              FT   \n",
              "3       2020           6               MI              FT   \n",
              "4       2020          10               SE              FT   \n",
              "\n",
              "                    job_title  salary salary_currency  salary_in_usd  \\\n",
              "0              Data Scientist   70000             EUR          79833   \n",
              "1  Machine Learning Scientist  260000             USD         260000   \n",
              "2           Big Data Engineer   85000             GBP         109024   \n",
              "3        Product Data Analyst   20000             USD          20000   \n",
              "4   Machine Learning Engineer  150000             USD         150000   \n",
              "\n",
              "  employee_residence  remote_ratio  ... JPY MXN PLN SGD TRY  USD  EN  EX  MI  \\\n",
              "0                 DE             0  ...   0   0   0   0   0    0   0   0   1   \n",
              "1                 JP             0  ...   0   0   0   0   0    1   0   0   0   \n",
              "2                 GB            50  ...   0   0   0   0   0    0   0   0   0   \n",
              "3                 HN             0  ...   0   0   0   0   0    1   0   0   1   \n",
              "4                 US            50  ...   0   0   0   0   0    1   0   0   0   \n",
              "\n",
              "   SE  \n",
              "0   0  \n",
              "1   1  \n",
              "2   1  \n",
              "3   0  \n",
              "4   1  \n",
              "\n",
              "[5 rows x 90 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-673a4eee-88b6-4eee-92ea-177abd94b1be\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>work_year</th>\n",
              "      <th>work_month</th>\n",
              "      <th>experience_level</th>\n",
              "      <th>employment_type</th>\n",
              "      <th>job_title</th>\n",
              "      <th>salary</th>\n",
              "      <th>salary_currency</th>\n",
              "      <th>salary_in_usd</th>\n",
              "      <th>employee_residence</th>\n",
              "      <th>remote_ratio</th>\n",
              "      <th>...</th>\n",
              "      <th>JPY</th>\n",
              "      <th>MXN</th>\n",
              "      <th>PLN</th>\n",
              "      <th>SGD</th>\n",
              "      <th>TRY</th>\n",
              "      <th>USD</th>\n",
              "      <th>EN</th>\n",
              "      <th>EX</th>\n",
              "      <th>MI</th>\n",
              "      <th>SE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020</td>\n",
              "      <td>6</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>70000</td>\n",
              "      <td>EUR</td>\n",
              "      <td>79833</td>\n",
              "      <td>DE</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020</td>\n",
              "      <td>11</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Machine Learning Scientist</td>\n",
              "      <td>260000</td>\n",
              "      <td>USD</td>\n",
              "      <td>260000</td>\n",
              "      <td>JP</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020</td>\n",
              "      <td>12</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Big Data Engineer</td>\n",
              "      <td>85000</td>\n",
              "      <td>GBP</td>\n",
              "      <td>109024</td>\n",
              "      <td>GB</td>\n",
              "      <td>50</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020</td>\n",
              "      <td>6</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Product Data Analyst</td>\n",
              "      <td>20000</td>\n",
              "      <td>USD</td>\n",
              "      <td>20000</td>\n",
              "      <td>HN</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020</td>\n",
              "      <td>10</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Machine Learning Engineer</td>\n",
              "      <td>150000</td>\n",
              "      <td>USD</td>\n",
              "      <td>150000</td>\n",
              "      <td>US</td>\n",
              "      <td>50</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 90 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-673a4eee-88b6-4eee-92ea-177abd94b1be')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-673a4eee-88b6-4eee-92ea-177abd94b1be button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-673a4eee-88b6-4eee-92ea-177abd94b1be');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 275
        }
      ],
      "source": [
        "job_titles = pd.get_dummies(data[\"job_title\"])\n",
        "employment_types = pd.get_dummies(data[\"employment_type\"])\n",
        "salary_currencies = pd.get_dummies(data[\"salary_currency\"])\n",
        "experience_levels = pd.get_dummies(data[\"experience_level\"])\n",
        "data = data.join(job_titles)\n",
        "data = data.join(employment_types)\n",
        "data = data.join(salary_currencies)\n",
        "data = data.join(experience_levels)\n",
        "data.head()"
      ],
      "id": "5RDVJn556OjZ"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5. Processing"
      ],
      "metadata": {
        "id": "_Z_u73v4_a90"
      },
      "id": "_Z_u73v4_a90"
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 5.1 Fit a Decision Tree to classify the size of company in which each data scientist work."
      ],
      "metadata": {
        "id": "fVNhv5Gp_6Wt"
      },
      "id": "fVNhv5Gp_6Wt"
    },
    {
      "cell_type": "code",
      "source": [
        "# This is represented by the feature \"company_size\"\n",
        "X = data.drop(['company_size', 'company_location', 'employee_residence','employment_type','job_title','salary_currency'], axis=1) # feature vector\n",
        "y = data['company_size'] # target variable\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42) # # Divide the data into training and test dataset\n",
        "encoder = ce.OrdinalEncoder(cols=['work_year', 'experience_level', 'remote_ratio'])\n",
        "X_train = encoder.fit_transform(X_train)\n",
        "X_test = encoder.transform(X_test)"
      ],
      "metadata": {
        "id": "9xjkfOGHAJ6P"
      },
      "id": "9xjkfOGHAJ6P",
      "execution_count": 280,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 5.2 Set the maximum depth of the tree to 3"
      ],
      "metadata": {
        "id": "ZbhVsUaHDGcB"
      },
      "id": "ZbhVsUaHDGcB"
    },
    {
      "cell_type": "code",
      "source": [
        "clf_gini = DecisionTreeClassifier(criterion= 'gini', max_depth = 3, random_state = 0) # Setting the criterion\n",
        "clf_gini.fit(X_train, y_train) # Fitting the model"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t8qoH8cCDQMD",
        "outputId": "4c50688a-ba1d-44bc-c71d-8d8ef50e0965"
      },
      "id": "t8qoH8cCDQMD",
      "execution_count": 281,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(max_depth=3, random_state=0)"
            ]
          },
          "metadata": {},
          "execution_count": 281
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_gini = clf_gini.predict(X_test)\n",
        "y_pred_train_gini = clf_gini.predict(X_train)\n",
        "y_pred_train_gini\n",
        "print('Model accuracy score with criterion gini index: {0:0.4f}'. format(accuracy_score(y_test, y_pred_gini)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N78w9bHxKGje",
        "outputId": "db82b0bb-dedf-4750-82b4-2559e72353be"
      },
      "id": "N78w9bHxKGje",
      "execution_count": 282,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model accuracy score with criterion gini index: 0.6766\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 5.3 Plot the decision tree"
      ],
      "metadata": {
        "id": "aiEyrfiqI52h"
      },
      "id": "aiEyrfiqI52h"
    },
    {
      "cell_type": "code",
      "source": [
        "dot_data = tree.export_graphviz(clf_gini, out_file=None, \n",
        "                              feature_names=X.columns,  \n",
        "                              class_names=y,  \n",
        "                              filled=True, rounded=True,  \n",
        "                              special_characters=True)\n",
        "graph = graphviz.Source(dot_data) \n",
        "\n",
        "graph "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "JXwkyG0vnxQa",
        "outputId": "eabe5b25-d187-4e5b-99df-499037a883a8"
      },
      "id": "JXwkyG0vnxQa",
      "execution_count": 283,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<graphviz.files.Source at 0x7f2068bc8ad0>"
            ],
            "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"1152pt\" height=\"433pt\"\n viewBox=\"0.00 0.00 1152.00 433.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 429)\">\n<title>Tree</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-429 1148,-429 1148,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<path fill=\"#c4f7da\" stroke=\"#000000\" d=\"M610.5,-425C610.5,-425 478.5,-425 478.5,-425 472.5,-425 466.5,-419 466.5,-413 466.5,-413 466.5,-354 466.5,-354 466.5,-348 472.5,-342 478.5,-342 478.5,-342 610.5,-342 610.5,-342 616.5,-342 622.5,-348 622.5,-354 622.5,-354 622.5,-413 622.5,-413 622.5,-419 616.5,-425 610.5,-425\"/>\n<text text-anchor=\"start\" x=\"493\" y=\"-409.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">work_year ≤ 1.5</text>\n<text text-anchor=\"start\" x=\"506.5\" y=\"-394.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.587</text>\n<text text-anchor=\"start\" x=\"496.5\" y=\"-379.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 406</text>\n<text text-anchor=\"start\" x=\"474.5\" y=\"-364.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [136, 216, 54]</text>\n<text text-anchor=\"start\" x=\"514.5\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = S</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<path fill=\"#f4cbad\" stroke=\"#000000\" d=\"M490.5,-306C490.5,-306 330.5,-306 330.5,-306 324.5,-306 318.5,-300 318.5,-294 318.5,-294 318.5,-235 318.5,-235 318.5,-229 324.5,-223 330.5,-223 330.5,-223 490.5,-223 490.5,-223 496.5,-223 502.5,-229 502.5,-235 502.5,-235 502.5,-294 502.5,-294 502.5,-300 496.5,-306 490.5,-306\"/>\n<text text-anchor=\"start\" x=\"326.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">salary_in_usd ≤ 132513.0</text>\n<text text-anchor=\"start\" x=\"372.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.595</text>\n<text text-anchor=\"start\" x=\"362.5\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 136</text>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [75, 32, 29]</text>\n<text text-anchor=\"start\" x=\"381.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = L</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M497.6333,-341.8796C487.1875,-332.6031 476.0219,-322.6874 465.289,-313.1559\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"467.368,-310.3213 457.5667,-306.2981 462.7199,-315.5553 467.368,-310.3213\"/>\n<text text-anchor=\"middle\" x=\"459.0464\" y=\"-327.5542\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">True</text>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<path fill=\"#8af0b5\" stroke=\"#000000\" d=\"M761.5,-306C761.5,-306 637.5,-306 637.5,-306 631.5,-306 625.5,-300 625.5,-294 625.5,-294 625.5,-235 625.5,-235 625.5,-229 631.5,-223 637.5,-223 637.5,-223 761.5,-223 761.5,-223 767.5,-223 773.5,-229 773.5,-235 773.5,-235 773.5,-294 773.5,-294 773.5,-300 767.5,-306 761.5,-306\"/>\n<text text-anchor=\"start\" x=\"648\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">work_year ≤ 2.5</text>\n<text text-anchor=\"start\" x=\"661.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.476</text>\n<text text-anchor=\"start\" x=\"651.5\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 270</text>\n<text text-anchor=\"start\" x=\"633.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [61, 184, 25]</text>\n<text text-anchor=\"start\" x=\"669.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = S</text>\n</g>\n<!-- 0&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>0&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M598.7115,-341.8796C611.1006,-332.368 624.3649,-322.1843 637.0676,-312.432\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"639.5186,-314.9628 645.3191,-306.0969 635.2558,-309.4105 639.5186,-314.9628\"/>\n<text text-anchor=\"middle\" x=\"642.0624\" y=\"-327.1839\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">False</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<path fill=\"#f9e0ce\" stroke=\"#000000\" d=\"M272.5,-187C272.5,-187 156.5,-187 156.5,-187 150.5,-187 144.5,-181 144.5,-175 144.5,-175 144.5,-116 144.5,-116 144.5,-110 150.5,-104 156.5,-104 156.5,-104 272.5,-104 272.5,-104 278.5,-104 284.5,-110 284.5,-116 284.5,-116 284.5,-175 284.5,-175 284.5,-181 278.5,-187 272.5,-187\"/>\n<text text-anchor=\"start\" x=\"157\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">work_month ≤ 5.5</text>\n<text text-anchor=\"start\" x=\"176.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.644</text>\n<text text-anchor=\"start\" x=\"166.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 101</text>\n<text text-anchor=\"start\" x=\"152.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [46, 28, 27]</text>\n<text text-anchor=\"start\" x=\"185.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = L</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M341.9487,-222.8796C325.6857,-213.0056 308.2299,-202.4075 291.6142,-192.3193\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"293.3769,-189.295 283.0126,-187.0969 289.744,-195.2785 293.3769,-189.295\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<path fill=\"#ea995f\" stroke=\"#000000\" d=\"M464,-187C464,-187 357,-187 357,-187 351,-187 345,-181 345,-175 345,-175 345,-116 345,-116 345,-110 351,-104 357,-104 357,-104 464,-104 464,-104 470,-104 476,-110 476,-116 476,-116 476,-175 476,-175 476,-181 470,-187 464,-187\"/>\n<text text-anchor=\"start\" x=\"353\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">work_month ≤ 6.5</text>\n<text text-anchor=\"start\" x=\"372.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.297</text>\n<text text-anchor=\"start\" x=\"366.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 35</text>\n<text text-anchor=\"start\" x=\"357\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [29, 4, 2]</text>\n<text text-anchor=\"start\" x=\"381.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = L</text>\n</g>\n<!-- 1&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>1&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M410.5,-222.8796C410.5,-214.6838 410.5,-205.9891 410.5,-197.5013\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"414.0001,-197.298 410.5,-187.2981 407.0001,-197.2981 414.0001,-197.298\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<path fill=\"#fefaf7\" stroke=\"#000000\" d=\"M119,-68C119,-68 12,-68 12,-68 6,-68 0,-62 0,-56 0,-56 0,-12 0,-12 0,-6 6,0 12,0 12,0 119,0 119,0 125,0 131,-6 131,-12 131,-12 131,-56 131,-56 131,-62 125,-68 119,-68\"/>\n<text text-anchor=\"start\" x=\"32\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.61</text>\n<text text-anchor=\"start\" x=\"21.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 43</text>\n<text text-anchor=\"start\" x=\"8\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [19, 6, 18]</text>\n<text text-anchor=\"start\" x=\"36.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = L</text>\n</g>\n<!-- 2&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>2&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M159.0179,-103.9815C146.1221,-94.3313 132.4116,-84.0714 119.5773,-74.4673\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"121.3908,-71.4528 111.2873,-68.2637 117.1968,-77.0574 121.3908,-71.4528\"/>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<path fill=\"#fbeee4\" stroke=\"#000000\" d=\"M268,-68C268,-68 161,-68 161,-68 155,-68 149,-62 149,-56 149,-56 149,-12 149,-12 149,-6 155,0 161,0 161,0 268,0 268,0 274,0 280,-6 280,-12 280,-12 280,-56 280,-56 280,-62 274,-68 268,-68\"/>\n<text text-anchor=\"start\" x=\"176.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.615</text>\n<text text-anchor=\"start\" x=\"170.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 58</text>\n<text text-anchor=\"start\" x=\"157\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [27, 22, 9]</text>\n<text text-anchor=\"start\" x=\"185.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = L</text>\n</g>\n<!-- 2&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>2&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M214.5,-103.9815C214.5,-95.618 214.5,-86.7965 214.5,-78.3409\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"218.0001,-78.2636 214.5,-68.2637 211.0001,-78.2637 218.0001,-78.2636\"/>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<path fill=\"#eeab7b\" stroke=\"#000000\" d=\"M409,-68C409,-68 310,-68 310,-68 304,-68 298,-62 298,-56 298,-56 298,-12 298,-12 298,-6 304,0 310,0 310,0 409,0 409,0 415,0 421,-6 421,-12 421,-12 421,-56 421,-56 421,-62 415,-68 409,-68\"/>\n<text text-anchor=\"start\" x=\"326\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.41</text>\n<text text-anchor=\"start\" x=\"315.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 19</text>\n<text text-anchor=\"start\" x=\"306\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [14, 4, 1]</text>\n<text text-anchor=\"start\" x=\"330.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = L</text>\n</g>\n<!-- 5&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>5&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M391.5095,-103.9815C387.5579,-95.3423 383.3828,-86.2144 379.3995,-77.5059\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"382.5146,-75.9017 375.1722,-68.2637 376.1489,-78.8134 382.5146,-75.9017\"/>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<path fill=\"#e78946\" stroke=\"#000000\" d=\"M550,-68C550,-68 451,-68 451,-68 445,-68 439,-62 439,-56 439,-56 439,-12 439,-12 439,-6 445,0 451,0 451,0 550,0 550,0 556,0 562,-6 562,-12 562,-12 562,-56 562,-56 562,-62 556,-68 550,-68\"/>\n<text text-anchor=\"start\" x=\"462.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.117</text>\n<text text-anchor=\"start\" x=\"456.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 16</text>\n<text text-anchor=\"start\" x=\"447\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [15, 0, 1]</text>\n<text text-anchor=\"start\" x=\"471.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = L</text>\n</g>\n<!-- 5&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>5&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M444.0127,-103.9815C451.357,-94.8828 459.1388,-85.242 466.5019,-76.1199\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"469.2857,-78.2434 472.8432,-68.2637 463.8388,-73.8467 469.2857,-78.2434\"/>\n</g>\n<!-- 9 -->\n<g id=\"node10\" class=\"node\">\n<title>9</title>\n<path fill=\"#6beca0\" stroke=\"#000000\" d=\"M761.5,-187C761.5,-187 637.5,-187 637.5,-187 631.5,-187 625.5,-181 625.5,-175 625.5,-175 625.5,-116 625.5,-116 625.5,-110 631.5,-104 637.5,-104 637.5,-104 761.5,-104 761.5,-104 767.5,-104 773.5,-110 773.5,-116 773.5,-116 773.5,-175 773.5,-175 773.5,-181 767.5,-187 761.5,-187\"/>\n<text text-anchor=\"start\" x=\"641\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">remote_ratio ≤ 1.5</text>\n<text text-anchor=\"start\" x=\"661.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.346</text>\n<text text-anchor=\"start\" x=\"651.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 220</text>\n<text text-anchor=\"start\" x=\"633.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [36, 174, 10]</text>\n<text text-anchor=\"start\" x=\"669.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = S</text>\n</g>\n<!-- 8&#45;&gt;9 -->\n<g id=\"edge9\" class=\"edge\">\n<title>8&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M699.5,-222.8796C699.5,-214.6838 699.5,-205.9891 699.5,-197.5013\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"703.0001,-197.298 699.5,-187.2981 696.0001,-197.2981 703.0001,-197.298\"/>\n</g>\n<!-- 12 -->\n<g id=\"node13\" class=\"node\">\n<title>12</title>\n<path fill=\"#f8dbc6\" stroke=\"#000000\" d=\"M1017.5,-187C1017.5,-187 865.5,-187 865.5,-187 859.5,-187 853.5,-181 853.5,-175 853.5,-175 853.5,-116 853.5,-116 853.5,-110 859.5,-104 865.5,-104 865.5,-104 1017.5,-104 1017.5,-104 1023.5,-104 1029.5,-110 1029.5,-116 1029.5,-116 1029.5,-175 1029.5,-175 1029.5,-181 1023.5,-187 1017.5,-187\"/>\n<text text-anchor=\"start\" x=\"861.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">salary_in_usd ≤ 65577.0</text>\n<text text-anchor=\"start\" x=\"908\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.62</text>\n<text text-anchor=\"start\" x=\"897.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 50</text>\n<text text-anchor=\"start\" x=\"879.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [25, 10, 15]</text>\n<text text-anchor=\"start\" x=\"912.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = L</text>\n</g>\n<!-- 8&#45;&gt;12 -->\n<g id=\"edge12\" class=\"edge\">\n<title>8&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M773.7526,-227.9874C797.0374,-216.5374 823.0515,-203.7453 847.5134,-191.7166\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"849.3744,-194.7017 856.8037,-187.1482 846.2855,-188.4201 849.3744,-194.7017\"/>\n</g>\n<!-- 10 -->\n<g id=\"node11\" class=\"node\">\n<title>10</title>\n<path fill=\"#e58139\" stroke=\"#000000\" d=\"M683,-68C683,-68 592,-68 592,-68 586,-68 580,-62 580,-56 580,-56 580,-12 580,-12 580,-6 586,0 592,0 592,0 683,0 683,0 689,0 695,-6 695,-12 695,-12 695,-56 695,-56 695,-62 689,-68 683,-68\"/>\n<text text-anchor=\"start\" x=\"608\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.0</text>\n<text text-anchor=\"start\" x=\"598\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 8</text>\n<text text-anchor=\"start\" x=\"588\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [8, 0, 0]</text>\n<text text-anchor=\"start\" x=\"608.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = L</text>\n</g>\n<!-- 9&#45;&gt;10 -->\n<g id=\"edge10\" class=\"edge\">\n<title>9&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M676.4135,-103.9815C671.5585,-95.2504 666.426,-86.0202 661.5371,-77.2281\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"664.4712,-75.3025 656.5524,-68.2637 658.3533,-78.7043 664.4712,-75.3025\"/>\n</g>\n<!-- 11 -->\n<g id=\"node12\" class=\"node\">\n<title>11</title>\n<path fill=\"#62ea9b\" stroke=\"#000000\" d=\"M849.5,-68C849.5,-68 725.5,-68 725.5,-68 719.5,-68 713.5,-62 713.5,-56 713.5,-56 713.5,-12 713.5,-12 713.5,-6 719.5,0 725.5,0 725.5,0 849.5,0 849.5,0 855.5,0 861.5,-6 861.5,-12 861.5,-12 861.5,-56 861.5,-56 861.5,-62 855.5,-68 849.5,-68\"/>\n<text text-anchor=\"start\" x=\"749.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.307</text>\n<text text-anchor=\"start\" x=\"739.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 212</text>\n<text text-anchor=\"start\" x=\"721.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [28, 174, 10]</text>\n<text text-anchor=\"start\" x=\"757.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = S</text>\n</g>\n<!-- 9&#45;&gt;11 -->\n<g id=\"edge11\" class=\"edge\">\n<title>9&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M732.268,-103.9815C739.449,-94.8828 747.0579,-85.242 754.2574,-76.1199\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"757.0099,-78.2818 760.4578,-68.2637 751.5151,-73.9451 757.0099,-78.2818\"/>\n</g>\n<!-- 13 -->\n<g id=\"node14\" class=\"node\">\n<title>13</title>\n<path fill=\"#c7a7f3\" stroke=\"#000000\" d=\"M991,-68C991,-68 892,-68 892,-68 886,-68 880,-62 880,-56 880,-56 880,-12 880,-12 880,-6 886,0 892,0 892,0 991,0 991,0 997,0 1003,-6 1003,-12 1003,-12 1003,-56 1003,-56 1003,-62 997,-68 991,-68\"/>\n<text text-anchor=\"start\" x=\"903.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.586</text>\n<text text-anchor=\"start\" x=\"897.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 23</text>\n<text text-anchor=\"start\" x=\"888\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [5, 5, 13]</text>\n<text text-anchor=\"start\" x=\"910.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = M</text>\n</g>\n<!-- 12&#45;&gt;13 -->\n<g id=\"edge13\" class=\"edge\">\n<title>12&#45;&gt;13</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M941.5,-103.9815C941.5,-95.618 941.5,-86.7965 941.5,-78.3409\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"945.0001,-78.2636 941.5,-68.2637 938.0001,-78.2637 945.0001,-78.2636\"/>\n</g>\n<!-- 14 -->\n<g id=\"node15\" class=\"node\">\n<title>14</title>\n<path fill=\"#eda978\" stroke=\"#000000\" d=\"M1132,-68C1132,-68 1033,-68 1033,-68 1027,-68 1021,-62 1021,-56 1021,-56 1021,-12 1021,-12 1021,-6 1027,0 1033,0 1033,0 1132,0 1132,0 1138,0 1144,-6 1144,-12 1144,-12 1144,-56 1144,-56 1144,-62 1138,-68 1132,-68\"/>\n<text text-anchor=\"start\" x=\"1044.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.412</text>\n<text text-anchor=\"start\" x=\"1038.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 27</text>\n<text text-anchor=\"start\" x=\"1029\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [20, 5, 2]</text>\n<text text-anchor=\"start\" x=\"1053.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = L</text>\n</g>\n<!-- 12&#45;&gt;14 -->\n<g id=\"edge14\" class=\"edge\">\n<title>12&#45;&gt;14</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M994.0032,-103.9815C1006.2066,-94.3313 1019.181,-84.0714 1031.3261,-74.4673\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"1033.4982,-77.2118 1039.171,-68.2637 1029.1562,-71.7211 1033.4982,-77.2118\"/>\n</g>\n</g>\n</svg>\n"
          },
          "metadata": {},
          "execution_count": 283
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6.0 Post-processing"
      ],
      "metadata": {
        "id": "n0P6CVLdy-66"
      },
      "id": "n0P6CVLdy-66"
    },
    {
      "cell_type": "markdown",
      "source": [
        "* Measure the performance of the decision tree"
      ],
      "metadata": {
        "id": "t0FT4YCO0IhD"
      },
      "id": "t0FT4YCO0IhD"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 6.1 Hold-out cross-validation Performance"
      ],
      "metadata": {
        "id": "zdnNaJWV0W3J"
      },
      "id": "zdnNaJWV0W3J"
    },
    {
      "cell_type": "code",
      "source": [
        "print('Model accuracy score with criterion gini index: {0:0.4f}'. format(accuracy_score(y_test, y_pred_gini)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Pk4aApK0mQN",
        "outputId": "cf0a74af-e1e5-4341-f064-40dee6504e28"
      },
      "id": "7Pk4aApK0mQN",
      "execution_count": 284,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model accuracy score with criterion gini index: 0.6766\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* Significa 67% de acerto nas ramificações da árvore."
      ],
      "metadata": {
        "id": "HfmjrQ3g05zE"
      },
      "id": "HfmjrQ3g05zE"
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_test, y_pred_gini)\n",
        "\n",
        "print('Confusion matrix\\n\\n', cm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "30SIpn3e1FxV",
        "outputId": "65ca2ba7-b877-4c34-be87-8f566f97e683"
      },
      "id": "30SIpn3e1FxV",
      "execution_count": 285,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion matrix\n",
            "\n",
            " [[50  9  3]\n",
            " [27 82  1]\n",
            " [22  3  4]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf_gini.classes_).plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "VQ620XEq1Jfj",
        "outputId": "b5549aca-c6cf-43c9-83f1-d415c2130cb7"
      },
      "id": "VQ620XEq1Jfj",
      "execution_count": 286,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f20689423d0>"
            ]
          },
          "metadata": {},
          "execution_count": 286
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train_gini)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WQggWh2H1pt_",
        "outputId": "3ce4b3f7-8e61-4c8b-c463-8ba90d409843"
      },
      "id": "WQggWh2H1pt_",
      "execution_count": 287,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training-set accuracy score: 0.7143\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Training set ACC score: {:.4f}'.format(clf_gini.score(X_train, y_train)))\n",
        "\n",
        "print('Test set ACC score: {:.4f}'.format(clf_gini.score(X_test, y_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y5ahggEw1sBk",
        "outputId": "5f806a20-3dfa-478f-be56-2aeac26ac0ff"
      },
      "id": "y5ahggEw1sBk",
      "execution_count": 288,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set ACC score: 0.7143\n",
            "Test set ACC score: 0.6766\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 6.1 Matthews Correlaction Coefficient"
      ],
      "metadata": {
        "id": "6wOTxKzq1-64"
      },
      "id": "6wOTxKzq1-64"
    },
    {
      "cell_type": "code",
      "source": [
        "matthews_corrcoef(y_test, y_pred_gini) # Test data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bcj1dVdO2EqU",
        "outputId": "ce926870-0a97-4029-cdc1-2ab82ff7290a"
      },
      "id": "Bcj1dVdO2EqU",
      "execution_count": 289,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.46939317925060076"
            ]
          },
          "metadata": {},
          "execution_count": 289
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "matthews_corrcoef(y_test, y_pred_gini) # Train data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lFnfBepu2LXV",
        "outputId": "e66eb6d9-5f29-433b-9f39-5cab4baba6b1"
      },
      "id": "lFnfBepu2LXV",
      "execution_count": 290,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.46939317925060076"
            ]
          },
          "metadata": {},
          "execution_count": 290
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3.9.13 64-bit",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    },
    "vscode": {
      "interpreter": {
        "hash": "b443154265002040221aa76392d8d67f0a943ba0393075094dd1cf7f7808809b"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
